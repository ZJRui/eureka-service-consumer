spring.application.name=ribbon-consumer

server.port=9000
#配置注册中心的地址
eureka.client.service-url.defaultZone=http://peer1:1111/eureka,http://peer2:2222/eureka


#如果项目单独使用Ribbon 而没有使用注册中心Eureka，
# 那么对于@RibbonClient（name="hello-service"）中指定的的服务，或者说是@LoadBalance的RestTemplate的getEntity（“http://hello-service/hello”）中指定的服务
#就需要 手动配置这些服务的提供者的地址
#hello-service.ribbon.listOfServers=localhost:8001,localhost:8002

#当服务调用方 调用到服务提供方的故障实例的时候就会进行重试
#开启重试机制,默认是关闭的
spring.cloud.loadbalancer.retry.enabled=true
#断路器的超时时间要大于Ribbon的超时时间，不然不会触发重试--》如果断路器的超时时间小于 Ribbon的超时时间，则会导致先触发断路器，从而也就没有重试机制了。
#hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=10000

#请求连接超时时间
hello-service.ribbon.ConnectTimeout=250

#请求处理的超时时间
hello-service.ribbon.ReadTimeout=1000
#对所有操作请求都进行重试
hello-service.ribbon.OkToRetryOnAllOperations=true
#切换实例的重试次数
hello-service.ribbon.MaxAutoRetriesNextServer=2
#对当前实例的重试次数
hello-service.ribbon.MaxAutoRetries=1


#配置Ribbon负载均衡算法，使用轮训方式
hello-service.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RoundRobinRule
